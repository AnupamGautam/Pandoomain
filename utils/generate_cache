#!/usr/bin/env python3

from pathlib import Path
from typing import Union

CACHE_DIR = Path("tests/data")
GENOMES_DIR = Path("tests/results/genomes")

CONFIG = Path("tests/config.yaml")
N = 24  # N neighbors to extract from GFF, grep -C N

GENOMES = ("GCF_001286845.1", "GCF_001286885.1")
PIDs = "|".join(("WP_072173795.1", "WP_072173796.1"))


def run(cmd: Union[str, list], dry: bool = False, shell: bool = True):
    import subprocess as sp

    if isinstance(cmd,list):
        print(f"Running \n{" ".join(cmd)}")
    else:
        print(f"Running \n{cmd}")

    if not dry:
        sp.run(cmd, shell=shell, check=True)


def genomes2ext(ext: str) -> list:
    return [Path(f"{GENOMES_DIR}/{genome}/{genome}{ext}") for genome in GENOMES]


def each2str(l: list) -> list:
    return [str(i) for i in l]


GFFs = genomes2ext(".gff")
FAAs = genomes2ext(".faa")


def download_genomes():

    SNAKEMAKE = (
        ["snakemake", "-c", "all", "--configfile", f"{CONFIG}", "--"]
        + each2str(GFFs)
        + each2str(FAAs)
    )

    run(["make", "tests/genomes.txt"], shell=False)
    run(SNAKEMAKE, shell=False)


def reduce_genomes():
    for idx, genome in enumerate(GENOMES):
        run(f"fasta_extract '{PIDs}' < {FAAs[idx]} > {CACHE_DIR}/{FAAs[idx].name}")
        run(f"grep --perl-regexp -C {N} '{PIDs}' {GFFs[idx]} > {CACHE_DIR}/{GFFs[idx].name}")


if __name__ == "__main__":
    CACHE_DIR.mkdir(parents=True, exist_ok=True)
    download_genomes()
    reduce_genomes()
