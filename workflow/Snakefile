include: "rules/globals.smk"  # no rules only globals, asserts, and utils
include: "rules/download.smk"


# include: "rules/blastp.smk"
# include: "rules/interproscan.smk"


rule all:
    input:
        f"{RESULTS}/genome_pid_query.tsv",
        f"{RESULTS}/hits.tsv",


SPLITS = f"{RESULTS}/splits_hmmer"
HEADER_HMMER_L = [
    "genome",
    "pid",
    "query",
    "score",
    "start",
    "end",
    "included",
    "reported",
    "pid_description",
    "query_description",
]
HEADER_HMMER = "\t".join(HEADER_HMMER_L)


rule hmmer:
    input:
        faas=ALL_FAAS,
    output:
        tsv=f"{RESULTS}/hmmer_raw.tsv",
    params:
        splits=SPLITS,
        queries=IN_QUERIES,
        split_size=1024,
        parallel_str=f"{SPLITS}/hmmer_" + "{#}.tsv {}",
        header=HEADER_HMMER,
        tmp_header=f"{RESULTS}/hmmer_raw.tsv.tmp",
    shell:
        """
        mkdir -p {params.splits}
        parallel -N {params.split_size} 'workflow/scripts/hmmer.py {params.queries} {params.parallel_str}' ::: {input.faas}
        fd -e tsv . {params.splits} | xargs cat >| {params.tmp_header}
        printf "{HEADER_HMMER}\\n" | cat - {params.tmp_header} >| {output.tsv}
        rm -r {params.splits} {params.tmp_header}
        """


rule hmmer_filter:
    input:
        tsv=rules.hmmer.output.tsv,
    output:
        f"{RESULTS}/genome_pid_query.tsv",
    shell:
        """
        workflow/scripts/genome_pid_query.R {input} >| {output}
        """


rule hits:
    input:
        cds=ALL_CDS,
        GPQ=rules.hmmer_filter.output,
    output:
        f"{RESULTS}/hits.tsv",
    threads: workflow.cores
    shell:
        """
        workflow/scripts/cds2hits.R {input.GPQ} {threads} {input.cds} >| {output}
        """


rule pairs:
    input:
        hits=rules.hits.output,
        GPQ=rules.hmmer_filter.output,
    output:
        f"{RESULTS}/pairs.tsv",
    params:
        config=workflow.configfiles[0],
    shell:
        """
        workflow/scripts/pairs.R {params.config} {input.hits} {input.GPQ} >| {output}
        """
