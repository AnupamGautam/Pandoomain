import re
import subprocess as sp
from pathlib import Path

import pandas as pd

IN_GENOMES = Path(config["genomes"])
IN_QUERIES = Path(config["queries"])
IN_BLAST_FIELDS = Path("config/blast_fields.tsv")

assert IN_GENOMES.exists(), "Input genome assembly list file not found."
assert IN_QUERIES.exists(), "Input query directory not found."
assert IN_BLAST_FIELDS.exists(), "Input blast fields file not found."

RESULTS = Path(config["results"])
RESULTS_GENOMES = RESULTS / "genomes"


GENOME_REGEX = r"GC[AF]_\d+\.\d"


wildcard_constraints:
    genome=GENOME_REGEX,


def sort_filter_genomes(path, filter_regex) -> list:
    # read
    df = pd.read_table(path, names=("genome",), delim_whitespace=True, comment="#")
    # filter and sort
    genome_matches = [bool(re.match(filter_regex, g)) for g in df.genome]
    df = df.loc[genome_matches, :].sort_values("genome")
    # write
    # df.to_csv(output, header=False, index=False)
    return list(df.genome)


def get_blast_fields(path) -> str:
    df = pd.read_table(
        path,
        sep="\t",
        comment="#",
    )
    return list(df.field)


def FALL_GENOMES() -> list[str]:
    genomes = sort_filter_genomes(IN_GENOMES, GENOME_REGEX)
    faas = [str(RESULTS_GENOMES / f"{genome}" / f"{genome}.faa") for genome in genomes]
    gffs = [str(RESULTS_GENOMES / f"{genome}" / f"{genome}.gff") for genome in genomes]
    return faas + gffs


def FALL_BLASTS() -> list[str]:
    genomes = sort_filter_genomes(IN_GENOMES, GENOME_REGEX)
    tsv6s = [str(RESULTS_GENOMES / f"{genome}" / f"{genome}.tsv") for genome in genomes]
    return tsv6s


def FALL() -> list[str]:
    return [f"{RESULTS}/all.tsv"]


ALL = FALL()
ALL_BLASTS = FALL_BLASTS()

BLAST_FIELDS = get_blast_fields(IN_BLAST_FIELDS)
BLAST_FORMAT = " ".join(BLAST_FIELDS)
ALL_HEADER = "\t".join(["genome"] + BLAST_FIELDS)


rule all:
    input:
        ALL,


rule bind_blasts:
    input:
        ALL_BLASTS,
    output:
        ALL,
    params:
        header=ALL_HEADER,
    shell:
        """
        cat - {input} > {output} <<< '{params.header}'
        """


rule download_genome:
    output:
        faa=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.faa",
        gff=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.gff",
    params:
        include="protein gff3",
    shell:
        """
        workflow/scripts/download_genome.py --include {params.include} --out-dir {RESULTS_GENOMES}/{wildcards.genome} -- {wildcards.genome}
        """


rule makedb:
    input:
        faa=rules.download_genome.output.faa,
    output:
        db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.dmnd",
    params:
        db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}",
    shell:
        """
        diamond makedb --db {params.db} --in {input.faa}
        """


rule blastp:
    input:
        query=IN_QUERIES,
        db=rules.makedb.output.db,
    output:
        tsv6=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.tsv",
    params:
        format=f"6 {BLAST_FORMAT}",  # Number 6 is for ncbi blast tabular format
        db=rules.makedb.params.db,
    shell:
        """
        diamond blastp --outfmt {params.format}\
            --out   {output.tsv6}\
            --db    {params.db}\
            --query {input.query}
        perl -i -ne 'print "{wildcards.genome}\\t" . "$_"' {output.tsv6}
        """
