include: "rules/globals.smk"  # no rules only globals, asserts, and utils
include: "rules/download.smk"


rule all:
    input:
        f"{RESULTS}/hmmer.tsv",
        f"{RESULTS}/genomes_metadata.tsv",
        f"{RESULTS}/.domains_faas.sentinel",
        f"{RESULTS}/all.faa",
        f"{RESULTS}/iscan.tsv",
        f"{RESULTS}/archs.tsv",
        f"{RESULTS}/taxallnomy.tar.gz",
        f"{RESULTS}/taxallnomy_lin_name.tsv",
        f"{RESULTS}/.genomes_unique_taxids.txt",
        f"{RESULTS}/taxallnomy_relevant.txt",


rule hmmer_input:
    input:
        ALL_FAAS,
    output:
        f"{RESULTS}/.input_faas.txt",
    run:
        with open(f"{output}", "w") as fh:
            for faa in ALL_FAAS:
                fh.write(f"{faa}\n")


rule hmmer:
    input:
        faas=rules.hmmer_input.output,
    output:
        tsv=f"{RESULTS}/hmmer.tsv",
    params:
        queries=f"{IN_QUERIES}",
    shell:
        r"""
        workflow/scripts/hmmer.py {params} {input} {output}
        """


rule domains_faas:
    input:
        hmmer=rules.hmmer.output,
    output:
        sentinel=f"{RESULTS}/.domains_faas.sentinel",
    params:
        db=f"{RESULTS_GENOMES}",
        out_dir=f"{RESULTS}/domains_faas",
    threads: workflow.cores
    shell:
        r"""
        workflow/scripts/harvest.R {params.db} {threads} {input} {params.out_dir}
        printf "`date`\\n" >| {output}
        """


rule bind_faas:
    input:
        rules.domains_faas.output,
    output:
        f"{RESULTS}/all.faa",
    params:
        rules.domains_faas.params.out_dir,
    shell:
        r"""
        cat  {params}/*.faa >| {output}
        """


rule interproscan_xml:
    input:
        faa=rules.bind_faas.output,
    output:
        xml=f"{RESULTS}/.iscan.xml",
    params:
        tmp="/tmp",
    threads: workflow.cores
    cache: "omit-software"
    shell:
        """
        interproscan.sh --formats XML\
                        --input {input} \
                        --outfile {output} \
                        --cpu {threads} \
                        --tempdir {params} \
                        --goterms
        """


rule interproscan_tsv:
    input:
        xml=rules.interproscan_xml.output,
    output:
        tsv=f"{RESULTS}/iscan.tsv",
    cache: "omit-software"
    params:
        header=ISCAN_HEADER,
        tmp="/tmp",
    shell:
        """
        interproscan.sh --mode convert \
                        --formats TSV \
                        --input {input.xml} \
                        --outfile {output.tsv}.temp \
                        --goterms \
                        --enable-tsv-residue-annot

        # Annotate headers
        cat - {output.tsv}.temp >| {output.tsv} <<< '{params.header}'

        rm {output.tsv}.temp
        """


rule darchs:
    input:
        rules.interproscan_tsv.output,
    output:
        d_focus=f"{RESULTS}/archs.tsv",
        p_focus=f"{RESULTS}/archsPIDF.tsv",
        code=f"{RESULTS}/archsCODE.tsv",
    params:
        f"{RESULTS}",
    shell:
        """
        workflow/scripts/archs.R {input} {params}
        """


def params_output_name(wc, output):
    return Path(output[0]).name


rule taxallnomy_targz:
    output:
        f"{RESULTS}/taxallnomy.tar.gz",
    cache: "omit-software"
    params:
        url="https://sourceforge.net/projects/taxallnomy/files/latest/download",
        output_name=params_output_name,
    shell:
        """
        aria2c --dir {RESULTS}\
            --continue=true --split 12\
            --max-connection-per-server=16\
            --min-split-size=1M\
            --out={params.output_name}\
            {params.url}
        """


rule taxallnomy_linname:
    input:
        rules.taxallnomy_targz.output,
    output:
        f"{RESULTS}/taxallnomy_lin_name.tsv",
    cache: "omit-software"
    params:
        ori=f"{RESULTS}/taxallnomy_database/taxallnomy_lin_name.tab",
    shell:
        """
        tar --directory={RESULTS} -vxf {input}
        mv {params.ori} {output}
        """


rule unique_taxids:
    input:
        rules.get_metadata.output,
    output:
        f"{RESULTS}/.genomes_unique_taxids.txt",
    params:
        col="4",
    shell:
        """
        cut -d $'\\t' -f {params} {input} | sed '1d' | sort -n | uniq  >| {output}
        """


rule relevant_taxids:
    input:
        all=rules.taxallnomy_linname.output,
        genomes=rules.unique_taxids.output,
    output:
        f"{RESULTS}/taxallnomy_relevant.txt",
    shell:
        """
        perl -ne \
        'BEGIN {{ open $fh, "<", "{input.genomes}" ; chomp @genomes = <$fh>; $regex = join "|", @genomes; print $regex . "\\n";}} \
        print if /$regex/' {input.all} >| {output}
        """
