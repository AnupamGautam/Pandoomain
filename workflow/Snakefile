import re
import subprocess as sp
from pathlib import Path
import pandas as pd


IN_GENOMES = Path(config["genomes"])
IN_QUERIES = Path(config["queries"])
IN_BLAST_FIELDS = Path("config/blast_fields.tsv")

assert IN_GENOMES.exists(), "Input genome assembly list file not found."
assert IN_QUERIES.exists(), "Input query directory not found."
assert IN_BLAST_FIELDS.exists(), "Input blast fields file not found."

RESULTS = Path(config["results"])
RESULTS_GENOMES = RESULTS / "genomes"


GENOME_REGEX = r"GC[AF]_\d+\.\d"


wildcard_constraints:
    genome=GENOME_REGEX,


GENOMES_SORTED = str(RESULTS / f"{IN_GENOMES.stem}_used{IN_GENOMES.suffix}")


rule all:
    input:
        GENOMES_SORTED,


rule filter_sort_genomes:
    input:
        raw_ids=f"{IN_GENOMES}",
    output:
        sorted=str(GENOMES_SORTED),
    run:
        # read
        GENOMES_DF = pd.read_table(
            IN_GENOMES, names=("genome",), delim_whitespace=True, comment="#"
        )
        # filter and sort
        genome_matches = [bool(re.match(GENOME_REGEX, g)) for g in GENOMES_DF.genome]
        GENOMES_DF = GENOMES_DF.loc[genome_matches, :].sort_values("genome")
        # write
        GENOMES_DF.to_csv(output.sorted, header=False, index=False)


# rule download_genome:
#     input:
#         sorted=rules.output.sort_genomes.sorted
#     output:
#         downloaded=f"{RESULTS_GENOMES}/{{query}}_downloaded.txt"
#     shell:
#         """
#         parallel mkdir -p {RESULTS_GENOMES}/{wildcards.genome}
#         parallel workflow/scripts/download_genome.py --include protein gff3 --out-dir {RESULTS_GENOMES}/{wildcards.genome} -- {wildcards.genome}
#         touch {output}
#         """
# rule makedb:
#     input:
#         faa=rules.download_genome.output.faa,
#     output:
#         db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.dmnd",
#     params:
#         db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}",
#     shell:
#         """
#         diamond makedb --db {params.db} --in {input.faa}
#         """
# BLAST_FIELDS_DF = pd.read_table(
#     IN_BLAST_FIELDS,
#     sep="\t",
#     comment="#",
# )
# BLAST_FIELDS = " ".join(list(BLAST_FIELDS_DF.field))
# rule blastp:
#     input:
#         query=f"{IN_QUERIES_DIR}/{{query}}.faa",
#         db=rules.makedb.output.db,
#     output:
#         tsv6=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}_{{query}}.tsv",
#     params:
#         format=f"6 {BLAST_FIELDS}",  # Number 6 is for ncbi blast tabular format
#         db=rules.makedb.params.db,
#     shell:
#         """
#         diamond blastp --outfmt {params.format}\
#             --out   {output.tsv6}\
#             --db    {params.db}\
#             --query {input.query}
#         perl -i -ne 'print "{wildcards.genome}\\t" . "$_"' {output}
#         """
# def blasts(wildcards):
#     query = wildcards.query
#     return [
#         str(RESULTS_GENOMES / genome / f"{genome}_{query}.tsv") for genome in GENOMES
#     ]
# rule bind_blasts:
#     input:
#         blasts,
#     output:
#         f"{RESULTS}/{{query}}.tsv",
#     shell:
#         """
#         cat {input} > {output}
#         """
