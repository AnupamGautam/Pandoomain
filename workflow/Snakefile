configfile: "config/config.yaml"


wildcard_constraints:
    genome="GC[AF]_\d+\.\d",


INPUT_GENOMES = config["input_genomes"]
INPUT_GENES = "input_genes.faa"


with open(INPUT_GENOMES, "r") as f:
    GENOMES = list()
    for line in f:
        GENOMES.append(line.strip())


RESULTS = "results"
RESULTS_GENOMES = f"{RESULTS}/genomes"


rule all:
    input:
        f"{RESULTS}/all_distances.tsv",


rule download_genome:
    output:
        faa=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.faa",
        gff=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.gff",
    conda:
        "envs/ncbi_datasets.yaml"
    shell:
        """
        mkdir -p {RESULTS_GENOMES}/{wildcards.genome}
        workflow/scripts/download_genome.py --include protein gff3 --out-dir {RESULTS_GENOMES}/{wildcards.genome} -- {wildcards.genome}
        """


rule blastp:
    input:
        faa=rules.download_genome.output.faa,
        queries=f"{INPUT_GENES}",
    output:
        tsv=f"{RESULTS_GENOMES}/{{genome}}/blastp.tsv",
    params:
        db=f"{RESULTS_GENOMES}/{{genome}}/diamond_DB",
        tsv_format="6 qseqid sseqid pident qcovhsp scovhsp evalue",
    shell:
        """
        diamond makedb --in {input.faa} -d {params.db}
        diamond blastp --header --outfmt {params.tsv_format}\
            -o {output.tsv}\
            -d {params.db}\
            -q {input.queries}
        """


rule get_distances:
    input:
        tsv=rules.blastp.output.tsv,
        gff=rules.download_genome.output.gff,
    output:
        distances=f"{RESULTS_GENOMES}/{{genome}}/distances.tsv",
    shell:
        """
        workflow/scripts/parse_blastp.R {input} {output}
        """


rule join_distances:
    input:
        [f"{RESULTS_GENOMES}/{genome}/distances.tsv" for genome in GENOMES],
    output:
        f"{RESULTS}/all_distances.tsv",
    shell:
        """
        fd -I 'distances.tsv' '{RESULTS_GENOMES}' | xargs cat >| {output}
        sed -i $'1i genome\tywqJ\tywqL\tdistance\tgene_count\tsame_strand\tywqJ_first\tcontig\trefseq' {output}
        """
