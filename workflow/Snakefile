import os
import re
import subprocess as sp
from pathlib import Path

import pandas as pd

configfile: "config/config.yaml"


def is_internet_on():
    # https://stackoverflow.com/questions/20913411/test-if-an-internet-connection-is-present-in-python
    import socket

    try:
        socket.create_connection(("1.1.1.1", 53))
        return True
    except OSError:
        return False


IN_GENOMES = Path(config["genomes"])
IN_QUERIES = Path(config["queries"])
IN_BLAST_FIELDS = Path("config/blast_fields.tsv")

assert is_internet_on(), "No network connection."
assert IN_GENOMES.exists(), "Input genome assembly list file not found."
assert IN_QUERIES.exists(), "Input query directory not found."
assert IN_BLAST_FIELDS.exists(), "Input blast fields file not found."

RESULTS = Path(config["results"])
RESULTS_GENOMES = RESULTS / "genomes"


GENOME_REGEX = r"GC[AF]_\d+\.\d"


wildcard_constraints:
    genome=GENOME_REGEX,


def sort_filter_genomes(path, filter_regex) -> list:
    # read, trim trailing white space and comments
    df = pd.read_table(path, names=("genome",), sep=r"\s+", comment="#")
    # filter and sort
    genome_matches = [bool(re.match(filter_regex, g)) for g in df.genome]
    df = df.loc[genome_matches, :].sort_values("genome")
    # write
    # df.to_csv(output, header=False, index=False)
    return list(df.genome)


def get_blast_fields(path) -> str:
    df = pd.read_table(
        path,
        sep="\t",
        comment="#",
    )
    return list(df.field)


def FALL_BLASTS() -> list[str]:
    genomes = sort_filter_genomes(IN_GENOMES, GENOME_REGEX)
    tsv6s = [
        str(RESULTS_GENOMES / f"{genome}" / f"{genome}_blast.tsv") for genome in genomes
    ]
    return tsv6s


ISCAN_HEADER_L = [
    "protein",
    "md5",
    "length",
    "analysis",
    "memberDB",
    "memberDB_txt",
    "start",
    "end",
    "score",
    "recommended",
    "date",
    "interpro",
    "interpro_txt",
    "GO",
    "residue",
]
ISCAN_HEADER = "\t".join(ISCAN_HEADER_L)

ISCAN_XML = Path("iscan.xml")
ISCAN_TSV = Path("iscan.tsv")

BLASTS_FAA = Path("blasts.faa")
BLASTS_TSV = Path("blasts.tsv")
BLASTS_PID = Path("blasts_pids.txt")

ALL_BLASTS = FALL_BLASTS()
BLAST_FIELDS = get_blast_fields(IN_BLAST_FIELDS)
BLAST_FORMAT = " ".join(BLAST_FIELDS)
ALL_HEADER = "\t".join(["genome"] + BLAST_FIELDS)


# Default rule at the end of file


rule download_genome:
    output:
        faa=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.faa",
        gff=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.gff",
    params:
        include="protein gff3",
    retries: 3
    shell:
        """
        workflow/scripts/download_genome.py --include {params.include} --out-dir {RESULTS_GENOMES}/{wildcards.genome} -- {wildcards.genome}
        """


rule makedb:
    input:
        faa=rules.download_genome.output.faa,
    output:
        db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.dmnd",
    params:
        db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}",
    shell:
        """
        diamond makedb --db {params.db} --in {input.faa}
        """


rule blastp:
    input:
        query=IN_QUERIES,
        db=rules.makedb.output.db,
    output:
        tsv6=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}_blast.tsv",
    params:
        format=f"6 {BLAST_FORMAT}",  # Number 6 is for ncbi blast tabular format
        db=rules.makedb.params.db,
    shell:
        """
        diamond blastp --outfmt {params.format}\
            --out   {output.tsv6}\
            --db    {params.db}\
            --query {input.query}
        perl -i -ne 'print "{wildcards.genome}\\t" . "$_"' {output.tsv6}
        """


rule bind_blasts:
    input:
        ALL_BLASTS,
    output:
        f"{RESULTS}/{BLASTS_TSV}",
    params:
        header=ALL_HEADER,
    shell:
        """
        cat - {input} >| {output} <<< '{params.header}'
        """


rule get_proteins:
    input:
        rules.bind_blasts.output,
    output:
        f"{RESULTS}/{BLASTS_FAA}",
    params:
        width="80",
    shell:
        """
        workflow/scripts/blast2faa.R {input} 2> /dev/null | fasta_unique | fasta_pretty -w={params.width} >| {output}
        """


rule interproscan_xml:
    input:
        faa=rules.get_proteins.output,
    output:
        xml=f"{RESULTS}/{ISCAN_XML}",
    params:
        temp="/tmp",
    threads: workflow.cores
    shell:
        """
        interproscan.sh --formats XML\
                        --input {input.faa} \
                        --outfile {output.xml} \
                        --cpu {threads} \
                        --tempdir {params.temp} \
                        --goterms
        """


rule interproscan_tsv:
    input:
        xml=rules.interproscan_xml.output.xml,
    output:
        tsv=f"{RESULTS}/{ISCAN_TSV}",
    params:
        header=ISCAN_HEADER,
        temp="/tmp",
    default_target: True
    shell:
        """
        interproscan.sh --mode convert \
                        --formats TSV \
                        --input {input.xml} \
                        --outfile {output.tsv}.temp \
                        --goterms \
                        --enable-tsv-residue-annot

        cat - {output.tsv}.temp >| {output.tsv} <<< '{params.header}'

        rm {output.tsv}.temp
        """


rule get_pids:
    input:
        rules.bind_blasts.output,
    output:
        f"{RESULTS}/{BLASTS_PID}",
    params:
        faa=rules.get_proteins.output,
    shell:
        """
        sed '1d' {input} | perl -ape '$_ = $F[3] . "\\n"' | sort | uniq >| {output}

        N_FAA=`grep -c '^>' {params.faa}`
        N_PID=`grep -c '^'  {output}`

        if [[ "$N_FAA" -ne "$N_PID" ]]; then exit 1; fi
        """


# rule hits_gff:
#     input:
#         gff=rules.download_genome.output.gff,
#         pids=rules.get_pids.output
#     output:
#         f"{RESULTS}/{{genome}}/{{genome}}_hits.tsv"
#     shell:
#         """
#         workflow/scripts/hits_gff.R {input.pids} {input.gff} >| {output}
#         """
