import re
import subprocess as sp
from snakemake.utils import available_cpu_count

IN_GENOMES = config["genomes"]
IN_GENES = config["genes"]
IN_BLAST_FIELDS = "config/blast_fields.txt"

RESULTS = config["results"]
RESULTS_GENOMES = f"{RESULTS}/genomes"
RESULTS_BLASTS = f"{RESULTS}/blasts.tsv"

THREADS = (
    available_cpu_count() if config["threads"] == "all" else int(config["threads"])
)
GENOME_REGEX = r"GC[AF]_\d+\.\d"


configfile: "config/config.yaml"


wildcard_constraints:
    genome=GENOME_REGEX,


def fasta_entries(path):
    CP = sp.run(f"grep -c '^>' {path}", shell=True, capture_output=True, check=True)
    return int(CP.stdout)


assert fasta_entries(IN_GENES) == 2, "Pipeline is only valid for 2 genes"


def parse(path, mode=None):
    with open(path, "r") as file:
        out = list()
        for line in file:
            line = re.sub(r"#.*$", "", line)  # rm comments
            line = line.strip()  # rm leading and trailing whitespace
            if line == "":
                continue
            if mode != "genome":
                out.append(line)
            elif re.match(GENOME_REGEX, line).group(0) == line:
                out.append(line)  # append only valid assembly ids
    return out


GENOMES = parse(IN_GENOMES, mode="genome")
BLAST_FIELDS = " ".join(parse(IN_BLAST_FIELDS))


rule all:
    input:
        f"{RESULTS_BLASTS}",


rule download_genome:
    output:
        faa=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.faa",
        gff=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.gff",
    shell:
        """
        mkdir -p {RESULTS_GENOMES}/{wildcards.genome}
        workflow/scripts/download_genome.py --include protein gff3 --out-dir {RESULTS_GENOMES}/{wildcards.genome} -- {wildcards.genome}
        """


rule blastp:
    input:
        faa=rules.download_genome.output.faa,
        queries=f"{IN_GENES}",
    output:
        tsv=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}.tsv",
    params:
        db=f"{RESULTS_GENOMES}/{{genome}}/{{genome}}",
        format=f"{BLAST_FIELDS}",
    shell:
        """
        diamond makedb --in {input.faa} -d {params.db}
        diamond blastp --outfmt {params.format}\
            -o {output.tsv}\
            -d {params.db}\
            -q {input.queries}
        """


rule bind_blasts:
    input:
        [f"{RESULTS_GENOMES}/{genome}/{genome}.tsv" for genome in GENOMES],
    output:
        blasts=f"{RESULTS_BLASTS}",
    threads: THREADS
    params:
        debug="F",
    shell:
        """
        workflow/scripts/bind_blasts.R {output} {RESULTS_GENOMES} {IN_GENOMES} {IN_BLAST_FIELDS} {threads} {params.debug}
        """
